<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{roomTitle}} - Escape Room</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 10px;
        }
        
        .room-info {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
        }
        
        .score-panel {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .score-item {
            text-align: center;
        }
        
        .score-label {
            font-size: 0.9em;
            color: rgba(255,255,255,0.7);
            margin-bottom: 5px;
        }
        
        .score-value {
            font-size: 2em;
            font-weight: bold;
            color: #ffd93d;
        }
        
        .key-banner {
            background: rgba(255, 217, 61, 0.2);
            border: 2px solid rgba(255, 217, 61, 0.5);
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .key-message {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.1em;
            color: #ffd93d;
            font-weight: bold;
        }
        
        .key-icon {
            background: #ffd93d;
            color: #000;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2em;
        }
        
        .btn-go-next-room {
            padding: 12px 25px;
            background: #ffd93d;
            color: #000;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            font-size: 1.1em;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
        }
        
        .btn-go-next-room:hover {
            background: #ffc700;
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }
        
        .enemies-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .enemy-card {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .enemy-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            border-color: rgba(255,255,255,0.4);
        }
        
        .enemy-card.deleted {
            opacity: 0.5;
            background: rgba(100,100,100,0.2);
        }
        
        .enemy-name {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 10px;
            color: #ff6b6b;
        }
        
        .enemy-stats {
            margin: 10px 0;
        }
        
        .health-bar {
            width: 100%;
            height: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            overflow: hidden;
            margin: 5px 0;
        }
        
        .health-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b 0%, #ee5a52 100%);
            transition: width 0.3s;
        }
        
        .shield-badge {
            display: inline-block;
            background: #4ecdc4;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            margin: 5px 0;
        }
        
        .shield-badge.destroyed {
            background: #666;
            text-decoration: line-through;
        }
        
        .key-badge {
            display: inline-block;
            background: #ffd93d;
            color: #000;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            margin: 5px 0;
            font-weight: bold;
        }
        
        .actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: all 0.3s;
            position: relative;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .http-method {
            background: rgba(0,0,0,0.3);
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 0.8em;
            font-weight: bold;
            font-family: 'Courier New', monospace;
        }
        
        .btn-destroy-shield {
            background: #4ecdc4;
            color: #fff;
        }
        
        .btn-destroy-shield:hover {
            background: #3ab8b0;
        }
        
        .btn-destroy-shield:disabled {
            background: #666;
            cursor: not-allowed;
        }
        
        .btn-kill {
            background: #ff6b6b;
            color: #fff;
        }
        
        .btn-kill:hover {
            background: #ee5a52;
        }
        
        .btn-kill:disabled {
            background: #666;
            cursor: not-allowed;
        }
        
        .message {
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
            background: rgba(76, 175, 80, 0.3);
            border: 1px solid rgba(76, 175, 80, 0.5);
            display: none;
        }
        
        .message.error {
            background: rgba(244, 67, 54, 0.3);
            border-color: rgba(244, 67, 54, 0.5);
        }
        
        .next-room-link {
            display: inline-block;
            margin-top: 20px;
            padding: 15px 30px;
            background: #ffd93d;
            color: #000;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            font-size: 1.2em;
            transition: all 0.3s;
        }
        
        .next-room-link:hover {
            background: #ffc700;
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>{{roomTitle}}</h1>
            <div class="room-info">
                <p>Room: <strong>{{roomName}}</strong></p>
                <p>Defeat enemies to collect keys and progress to the next room!</p>
            </div>
            <div class="score-panel">
                <div class="score-item">
                    <div class="score-label">Enemies Defeated</div>
                    <div class="score-value" id="defeatedCount">{{defeatedCount}}</div>
                </div>
                <div class="score-item">
                    <div class="score-label">Collectibles Found</div>
                    <div class="score-value" id="collectiblesCount">{{collectiblesCount}}</div>
                </div>
            </div>
        </header>
        
        {{#hasAvailableKey}}
        <div class="key-banner">
            <div class="key-message">
                <span class="key-icon">üóùÔ∏è</span>
                <span>Key Available: <strong>{{availableKey}}</strong></span>
            </div>
            <a href="{{nextRoomPath}}" class="btn-go-next-room">
                <span class="http-method">GET</span>
                Go to Next Room
            </a>
        </div>
        {{/hasAvailableKey}}
        
        <div class="message" id="message"></div>
        
        <div class="enemies-container">
            {{#enemies}}
            <div class="enemy-card {{#deleted}}deleted{{/deleted}}" id="enemy-{{id}}">
                <div class="enemy-name">{{name}}</div>
                <div class="enemy-stats">
                    <div>Health: {{health}} / {{maxHealth}}</div>
                    <div class="health-bar">
                        <div class="health-fill" data-health="{{health}}" data-max="{{maxHealth}}"></div>
                    </div>
                    {{#hasShield}}
                    <div class="shield-badge {{#shieldDestroyed}}destroyed{{/shieldDestroyed}}">
                        {{#shieldDestroyed}}Shield Destroyed{{/shieldDestroyed}}
                        {{^shieldDestroyed}}üõ°Ô∏è Has Shield{{/shieldDestroyed}}
                    </div>
                    {{/hasShield}}
                    {{#hasKey}}
                    <div class="key-badge">üóùÔ∏è Drops Key: {{keyValue}}</div>
                    {{/hasKey}}
                    {{#deleted}}
                    <div style="color: #ff6b6b; font-weight: bold; margin-top: 10px;">DEFEATED</div>
                    {{/deleted}}
                </div>
                {{^deleted}}
                <div class="actions">
                    {{#hasShield}}
                    {{^shieldDestroyed}}
                    <button class="btn-destroy-shield" onclick="destroyShield('{{id}}')">
                        <span class="http-method">PUT</span>
                        Destroy Shield
                    </button>
                    {{/shieldDestroyed}}
                    {{/hasShield}}
                    <button class="btn-kill" onclick="killEnemy('{{id}}')" {{#hasShield}}{{^shieldDestroyed}}disabled{{/shieldDestroyed}}{{/hasShield}}>
                        <span class="http-method">DELETE</span>
                        Kill Enemy
                    </button>
                </div>
                {{/deleted}}
            </div>
            {{/enemies}}
            {{^enemies}}
            <p>No enemies in this room.</p>
            {{/enemies}}
        </div>
    </div>
    
    <script>
        const roomName = '{{roomName}}';
        
        function showMessage(text, isError = false) {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = 'message' + (isError ? ' error' : '');
            messageEl.style.display = 'block';
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 5000);
        }
        
        async function destroyShield(enemyId) {
            try {
                const response = await fetch(`/${roomName}/enemies/${enemyId}/shield`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showMessage(data.message || 'Shield destroyed!');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showMessage(data.error || 'Failed to destroy shield', true);
                }
            } catch (error) {
                showMessage('Error: ' + error.message, true);
            }
        }
        
        async function killEnemy(enemyId) {
            try {
                const response = await fetch(`/${roomName}/enemies/${enemyId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showMessage(data.message || 'Enemy defeated!');
                    
                    // Update score
                    if (data.score) {
                        if (data.score.defeatedCount !== undefined) {
                            document.getElementById('defeatedCount').textContent = data.score.defeatedCount;
                        }
                        if (data.score.collectiblesCount !== undefined) {
                            document.getElementById('collectiblesCount').textContent = data.score.collectiblesCount;
                        }
                    }
                    
                    if (data.key) {
                        // Show message first
                        showMessage(`Key collected: ${data.key}!`);
                        // Reload to show persistent banner
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        setTimeout(() => location.reload(), 1500);
                    }
                } else {
                    showMessage(data.error || 'Failed to kill enemy', true);
                }
            } catch (error) {
                showMessage('Error: ' + error.message, true);
            }
        }
        
        // Calculate health percentage for health bar
        document.querySelectorAll('.health-fill').forEach(healthFill => {
            const health = parseInt(healthFill.getAttribute('data-health'));
            const maxHealth = parseInt(healthFill.getAttribute('data-max'));
            if (maxHealth > 0) {
                const percentage = (health / maxHealth) * 100;
                healthFill.style.width = Math.max(0, Math.min(100, percentage)) + '%';
            } else {
                healthFill.style.width = '0%';
            }
        });
    </script>
</body>
</html>

